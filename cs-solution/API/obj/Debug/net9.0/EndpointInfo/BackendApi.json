{
  "openapi": "3.0.1",
  "info": {
    "title": "BackendApi",
    "version": "1.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Sanity check.",
        "description": "A simple sanity check. Should return the \"Hello there!\" string.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/data-specifications": {
      "post": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Add a new data specification.",
        "description": "Process the given URI, which should point to a data specification. Add that data specification to the database. If name is not specified, it will be named \"Unnamed data specification #{ID}\".",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostDataSpecificationsRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Get ID and Name of all data specifications.",
        "description": "Returns the ID and Name of each data specification in the database. (ToDo: In the future maybe add a limit to the query part)",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetDataSpecificationsResponseDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data-specifications/{dataSpecificationId}": {
      "get": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Get details of a data specification",
        "parameters": [
          {
            "name": "dataSpecificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSpecification"
                }
              }
            }
          }
        }
      }
    },
    "/conversations": {
      "post": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Start a new conversation.",
        "description": "Create a new conversation over the data specification with the given ID. The data specification must be already present in the database. If name is not specified, it will be named \"Unnamed conversation #{ID}\".",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostConversationsRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Get ID and Name of all conversations.",
        "description": "Returns the ID and Name of each conversation in the database. (ToDo: In the future maybe add a limit to the query part)",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetConversationsResponseDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{conversationId}": {
      "get": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Get all messages in the conversation.",
        "description": "Returns an array of messages in the conversation. Each message contains the message's source (user or chatbot), a timestamp of when the message was added to the conversation and the string value of the message.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{conversationId}/messages": {
      "post": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Add a message to the conversation.",
        "description": "Add a message to the conversation with the given conversationId. If the message's source is the user, further process the message (to extract relevant entities etc.). Returns the ID of the newly added message.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostConversationMessageDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SparqlResponse"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{conversationId}/messages/{messageId}/sparql-query": {
      "get": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Get the Sparql query corresponding to the user's message.",
        "description": "Each user's message is processed to extract relevant properties and the message is also translated into a Sparql query. This resource returns the translated Sparql query. The messageId must be an user's message, otherwise this resource will return an error.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/conversations/{conversationId}/messages/{messageId}/highlighted-words": {
      "get": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Get words that should be highlighted in the user's message.",
        "description": "Highlighted words are mapped to properties in the data specification. This resource returns the positions of the words to be highlighted and the IDs of the properties that they map to. The messageId must be an user's message, otherwise this resource will return an error.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/data-specifications/{dataSpecificationId}/property-summary": {
      "get": {
        "tags": [
          "BackendApi"
        ],
        "summary": "Get a summary of the specified property.",
        "description": "Get a summary of the property with the given propertyId from the data specification with the given ID.",
        "parameters": [
          {
            "name": "dataSpecificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "propertyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySummary"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DataSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "uri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetConversationsResponseDTO": {
        "required": [
          "conversationId",
          "title"
        ],
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetDataSpecificationsResponseDTO": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HighlightedProperty": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "wordsCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Message": {
        "required": [
          "source",
          "textValue",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/MessageSource"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "textValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageSource": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "PostConversationMessageDTO": {
        "required": [
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "integer",
            "format": "int32"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "textValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostConversationsRequestDTO": {
        "type": "object",
        "properties": {
          "dataSpecificationId": {
            "type": "integer",
            "format": "int32"
          },
          "conversationTitle": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostDataSpecificationsRequestDTO": {
        "required": [
          "uri"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "uri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertySummary": {
        "required": [
          "summary"
        ],
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SparqlResponse": {
        "required": [
          "highlightedWords",
          "sparqlQuery"
        ],
        "type": "object",
        "properties": {
          "sparqlQuery": {
            "type": "string",
            "nullable": true
          },
          "highlightedWords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HighlightedProperty"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}