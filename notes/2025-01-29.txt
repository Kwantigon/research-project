post data-specifications:
- neni jasne, proc se to dela.
- vice rozepsat, *k cemu* to je. Proc vubec se vola tady ta operace.
- napsat, ze URI ukazuje na Dataspecer package.
- v tuto chvili to mam jako synchronni operaci. Muze ale trvat dlouho, v tom pripade z toho udelat asynchronni operaci.

GET data-specifications
- vratit i uri pro kazdou datovou specifikaci.

POST /conversations
- misto ID v tele by to melo byt odkaz na data-specifications/{id}

GET /conversations
- vratit odkaz misto ID.
- mit jen informace jen o konverzaci.
- zpravy vratit v GET messages.

message source: user / system, ne 0 a 1.

POST /..../messages
- vratit rovnou url.
- ocekavat jen user message.
- presunout celou odpoved systemu na backend. Ne ze frontend si rekne o sparql a doplni do sablony a pak zavolat post. Je to divne rozdelene.

Vytvorit lepsi priklad, kde jsou videt volani RESTu.
Vice rozpracovat, jak bude vypadat prace s tou konverzaci. Ne kazda zprava od uzivatele se zpracovava stejne. Ja si celou dobu drzim nejakou vygenerovanou podstrukturu datove specifikace. Ty dalsi zpravy by mely nejak navazovat na tu strukturu.

Stepan chce, abych rozmyslel i vraceni se v konverzaci.

Po shlednuti zaznamu meetingu:
Mel by byt jeste resource na GET /conversations/{conversationId}/messages/{messageId}
- Dostanu puvodni user message.
- Pak jeste tam budou iri na responses - systemove zpravy.
- Proste tam bude vsechno.
- Ale nedavat subresourcy jako .../{messageId}/sparql nebo tak neco. Protoze budu vzdycky potrebovat vsechno.

Jeste mozna pridat to, ze kdyz se ptam na messages v konverzaci, tak si tam zadam ID zpravy jako parametr a pak dostanu vsechny zpravy od ID a novejsi.

Chybi tady prace s tou podstrukturou, kterou stavime pomoci LLM.
- Ja si prece vyznacuju podstrom z te datove specifikace.
- Takze musim pridat alespon naznak do backendu. Prace s nejakou tou strukturou.
Musim nejdriv namodelovat, co je konverzace, zprava atd. Pak muzu stavet RESTovy API.

Zaznam timestamp 1:41:00
Uplne prvni zprava od uzivatele.
- Na backendu pomoci LLM namapuju na semantickou vrstvu datove specifikace.
- Dostanu vyznacene entity.

Kdyz uzivatel klika na nejake veci, tak FE taky posila requesty. To mi zatim chybi.

Kdyz si uzivatel vybere nejake veci, tak to musim poslat na BE.
- "Toto si vybiram, toto si vybiram, ..."
- Kazda zvolena vec nejakym zpusobem modifikuje tu podstrukturu datove specifikace, kterou si na BE stavim.
Z te podstrukturu, kterou mam, si muzu pomoci LLM zobrazit uzivateli lexikalizaci (tj. nejaky ten question preview).
Kdyz uzivatel pouzije tu zpravu z preview, tak jakoby potvrzuje tu podstrukturu, kterou jsem na BE vytvoril, kdyz uzivatel klikal na ty veci, ktere chce potencialne pridat.

Uzivatel muze zasahnout do question preview a neco tam psat - to muze potencialne byt tezke vyresit. Ale kazdopadne tim by se trochu zmenila zase ta podstruktura, kterou stavim.

Zaznam timestamp 1:49:50
Uzivatel posila textovy dotaz nebo svoje rozhodnuti, co chce pridavat do dotazu za entities. Tim prispiva do struktury, kterou si buduju na BE.