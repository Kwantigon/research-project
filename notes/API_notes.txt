Write down the API.
Create dummy DB entities where needed.
Define the LLM interface.
Write a dummy interface implementation.

The response to every user message from the frontend is that the query is:
- Translated SPARQL query (simple string)
- Properties for query expansion (indices of the words to be highlighted - those can be clicked on and potentially be used as expansions).
So maybe I only need a single endpoint for every user message.
And I will keep the conversation state on the server side.

When users click on a word to see more information, that should correspond to a request.
Something like GET /conversations/{conversationId}/{property-name}
- If this property summary has been retrieved from the LLM before, it should be cached.
- I should give an ID to each property, because the user could use various words to refer to the same property. This could potentially solve the problem where user wants to see a summary for a property that is not in a message at all (they click on a message property then click on another property inside the summary).
