// <auto-generated />
using System;
using DataSpecificationNavigatorBackend.ConnectorsLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataSpecificationNavigatorBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataSpecificationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubstructureJsonString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SuggestedMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("UserSelectedItems")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataSpecificationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.DataSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataspecerPackageUuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Owl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataSpecifications");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.DataSpecificationItem", b =>
                {
                    b.Property<string>("Iri")
                        .HasColumnType("TEXT");

                    b.Property<int>("DataSpecificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DomainItemIri")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RangeItemDataSpecificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RangeItemIri")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Iri", "DataSpecificationId");

                    b.HasIndex("DataSpecificationId");

                    b.HasIndex("DomainItemIri", "DataSpecificationId");

                    b.HasIndex("RangeItemIri", "RangeItemDataSpecificationId");

                    b.ToTable("DataSpecificationItems");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.DataSpecificationItemMapping", b =>
                {
                    b.Property<int>("ItemDataSpecificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemIri")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserMessageId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSelectTarget")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MappedWords")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ItemDataSpecificationId", "ItemIri", "UserMessageId");

                    b.HasIndex("UserMessageId");

                    b.HasIndex("ItemIri", "ItemDataSpecificationId");

                    b.ToTable("DataSpecificationItemMappings");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.DataSpecificationPropertySuggestion", b =>
                {
                    b.Property<int>("ItemDataSpecificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemIri")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReplyMessageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainItemIri")
                        .HasColumnType("TEXT");

                    b.Property<string>("RangeItemIri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReasonForSuggestion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ItemDataSpecificationId", "ItemIri", "ReplyMessageId");

                    b.HasIndex("ReplyMessageId");

                    b.HasIndex("DomainItemIri", "ItemDataSpecificationId");

                    b.HasIndex("ItemIri", "ItemDataSpecificationId");

                    b.ToTable("DataSpecificationItemSuggestions");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConversationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("Sender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");

                    b.HasDiscriminator().HasValue("Message");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.ReplyMessage", b =>
                {
                    b.HasBaseType("DataSpecificationNavigatorBackend.Model.Message");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MappingText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SparqlQuery")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SparqlText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SuggestItemsText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ReplyMessage");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.UserMessage", b =>
                {
                    b.HasBaseType("DataSpecificationNavigatorBackend.Model.Message");

                    b.Property<Guid?>("ReplyMessageId")
                        .HasColumnType("TEXT");

                    b.HasIndex("ReplyMessageId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("UserMessage");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.Conversation", b =>
                {
                    b.HasOne("DataSpecificationNavigatorBackend.Model.DataSpecification", "DataSpecification")
                        .WithMany()
                        .HasForeignKey("DataSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSpecification");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.DataSpecificationItem", b =>
                {
                    b.HasOne("DataSpecificationNavigatorBackend.Model.DataSpecification", "DataSpecification")
                        .WithMany()
                        .HasForeignKey("DataSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataSpecificationNavigatorBackend.Model.DataSpecificationItem", "DomainItem")
                        .WithMany()
                        .HasForeignKey("DomainItemIri", "DataSpecificationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataSpecificationNavigatorBackend.Model.DataSpecificationItem", "RangeItem")
                        .WithMany()
                        .HasForeignKey("RangeItemIri", "RangeItemDataSpecificationId");

                    b.Navigation("DataSpecification");

                    b.Navigation("DomainItem");

                    b.Navigation("RangeItem");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.DataSpecificationItemMapping", b =>
                {
                    b.HasOne("DataSpecificationNavigatorBackend.Model.UserMessage", "UserMessage")
                        .WithMany("ItemMappings")
                        .HasForeignKey("UserMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataSpecificationNavigatorBackend.Model.DataSpecificationItem", "Item")
                        .WithMany("ItemMappingsTable")
                        .HasForeignKey("ItemIri", "ItemDataSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("UserMessage");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.DataSpecificationPropertySuggestion", b =>
                {
                    b.HasOne("DataSpecificationNavigatorBackend.Model.ReplyMessage", "ReplyMessage")
                        .WithMany("ItemSuggestions")
                        .HasForeignKey("ReplyMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataSpecificationNavigatorBackend.Model.DataSpecificationItem", "DomainItem")
                        .WithMany()
                        .HasForeignKey("DomainItemIri", "ItemDataSpecificationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataSpecificationNavigatorBackend.Model.DataSpecificationItem", "Item")
                        .WithMany("ItemSuggestionsTable")
                        .HasForeignKey("ItemIri", "ItemDataSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainItem");

                    b.Navigation("Item");

                    b.Navigation("ReplyMessage");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.Message", b =>
                {
                    b.HasOne("DataSpecificationNavigatorBackend.Model.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.UserMessage", b =>
                {
                    b.HasOne("DataSpecificationNavigatorBackend.Model.ReplyMessage", "ReplyMessage")
                        .WithOne("PrecedingUserMessage")
                        .HasForeignKey("DataSpecificationNavigatorBackend.Model.UserMessage", "ReplyMessageId");

                    b.Navigation("ReplyMessage");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.DataSpecificationItem", b =>
                {
                    b.Navigation("ItemMappingsTable");

                    b.Navigation("ItemSuggestionsTable");
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.ReplyMessage", b =>
                {
                    b.Navigation("ItemSuggestions");

                    b.Navigation("PrecedingUserMessage")
                        .IsRequired();
                });

            modelBuilder.Entity("DataSpecificationNavigatorBackend.Model.UserMessage", b =>
                {
                    b.Navigation("ItemMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
